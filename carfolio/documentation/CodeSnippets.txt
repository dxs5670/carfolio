
//------------
EntityManager manager = (EntityManager) Persistence.createEntityManagerFactory("IST311ProjectPU").createEntityManager();

//---------------
Query query = manager.createNamedQuery("ModelName.findAll");
List<ModelName> data =  query.getResultList();

List<ModelName> data  = manager.createNamedQuery("ModelName.findAll").getResultList();


for(ModelName d : data ){
    ...
}

//----- Database CRUD Operations------

public void create(SampleModel model){        
    try {
        manager.getTransaction().begin();
        if (model.getId() != null) {           
            // create model
            manager.persist(student);
            manager.getTransaction().commit();
        }         
    }
    catch (Exception ex){
        System.out.println(ex.getMessage());
    }
}

public void update(SampleModel model){
    try {
        
        SampleModel dbModel = manager.find(SampleModel.class, model.getId());
        
        if (dbModel != null){
            manager.getTransaction().begin();
            // update
            dbModel.setValue(model.getValue());    
            manager.getTransaction().commit();
        }
    }
    catch (Exception ex){
        System.out.println(ex.getMessage());
    }
}

public void delete(SampleModel model){
    try {        
        SampleModel dbModel = manager.find(SampleModel.class, model.getId());

        if (dbModel != null){
            manager.getTransaction().begin();
            //remove model
            manager.remove(dbModel); 
            manager.getTransaction().commit();
        }
    }
    catch (Exception ex){
        System.out.println(ex.getMessage());
    }
}




//--------------------------

FXCollections.observableArrayList

//---------NamedQuery--------
, @NamedQuery(name = "Course.findById", query = "SELECT c FROM Course c WHERE c.id = :id")
,@NamedQuery(name = "Course.findByName", query = "SELECT c FROM Course c WHERE c.name = :name")


//-----------TableView------------
//This will allow the table to select multiple rows at once

modelTable.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

        
//Disable the detailed person view button until a row is selected
this.detailedPersonViewButton.setDisable(true);



private boolean isEditable = false;

isEditable = checkboxEditCell.isSelected();


//Update the table to allow for the Value field  to be editable
modelTable.setEditable(isEditable);

modelColumnValue.setCellFactory(TextFieldTableCell.forTableColumn());
        




 void valueColumnChanged(TableColumn.CellEditEvent event){
    SampleModel model =  modelTable.getSelectionModel().getSelectedItem();
    model.setValue(edittedCell.getNewValue().toString());
    
    update(model);

}
   
 this.detailedPersonViewButton.setDisable(false);
    


public void deleteButtonAction()
    {
        SampleModel model = modelTable.getSelectionModel().getSelectedItem();
        delete(model);

        modelTable.getItems().remove(model)
        
        ObservableList<SampleModel> selectedRow, allRows;
        allRows = tableView.getItems();
        
        //this gives us the rows that were selected
        selectedRow = tableView.getSelectionModel().getSelectedItems();
        
        //loop over the selected rows and remove the Person objects from the table
        for (Person person: selectedRows)
        {
            allPeople.remove(person);
        }
    }
//
public void createButtonAction()
    {
        int id =  Integer.parseInt(textfieldID.getText());
        String value = textfieldValue.getText();
        
        SampleModel model = new SampleModel();
        model.setId(id);
        model.setValue(value);
        
        // add model to tableview
        modelTable.getItems().add(model);
        
        // add model to database
        create(model);
}

void showDetailButtonAction(ActionEvent event) {
        Parent detailedView = FXMLLoader.load(getClass().getResource("FXMLDocument.fxml"));
        Scene tableViewScene = new Scene(tableViewParent);
        
        //This line gets the Stage information
        Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();
        
        window.setScene(tableViewScene);
        window.show();
}

public void initData(SampleModel model)
    {
        selectedPerson = person;
        firstNameLabel.setText(selectedPerson.getFirstName());
        lastNameLabel.setText(selectedPerson.getLastName());
        birthdayLabel.setText(selectedPerson.getBirthday().toString());
        ageLabel.setText(Integer.toString(selectedPerson.getAge()));
        photo.setImage(selectedPerson.getImage());
    }
    

//--------------JAVAFX------------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.stage.Stage;


public class [xyz] extends Application{

  public static void main(String[] args) {
    launch(args);
  }

  @Override
  public void start(Stage stage) throws Exception {

      // loading from FXML
      Parent root = FXMLLoader.load(getClass().getResource("FXML_First.fxml"));
      Scene scene = new Scene(root);
      stage.setScene(scene);
      stage.show();

  }
}
// --------------------
ObservableList<SampleModel> odata = FXCollections.observableArrayList();
    for (SampleModel d : data) {
        //...
        System.out.println(d.toString()+ "");
        odata.add(d);
    }

    modelTable.setItems(odata);

//----------------------
//set up the columns in the table
modelColumnID.setCellValueFactory(new PropertyValueFactory<>("Id")); //should match with attribute Id (e.g., getId/setId methods) in SimpleModel
modelColumnValue.setCellValueFactory(new PropertyValueFactory<>("Value")); //should match with attribute Value (e.g., getValue/setValue methods) in SimpleModel

// ---------------------
@FXML
void simpleDialogAction(ActionEvent event) {
    // alert link: https://code.makery.ch/blog/javafx-dialogs-official/
    Alert alert = new Alert(AlertType.INFORMATION);
    alert.setTitle("Information Dialog");
    alert.setHeaderText("Look, an Information Dialog");
    alert.setContentText("I have a great message for you!");

    alert.showAndWait();
}

//-----------------------
@FXML
void loadingFXML(ActionEvent event) {

    try {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("FXML_Second.fxml"));
        Parent secondRoot = loader.load();

        // getting the controller from FXLoader
        FXML_SecondController secondController =  loader.getController();
        secondController.displayMessage(messageInput.getText());

        // Show Second FXML in new a window
        Stage stage = new Stage();
        stage.setScene(new Scene(secondRoot));
        stage.setTitle("Second Window");
        stage.show();
    }
    catch (IOException ex) {
        System.err.println(ex);
    }
}

// ----------------------------------
 @FXML
void loadingFXMLInPlace(ActionEvent event) {
    try {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("FXML_Second.fxml"));
        Parent secondRoot = loader.load();

        // getting the controller from FXLoader
        FXML_SecondController secondController =  loader.getController();
        secondController.displayMessage(messageInput.getText());

        Scene currentScene = ((Node)event.getSource()).getScene();

        // Get the current Scene from event
        //Stage currentStage = (Stage)((Node)event.getSource()).getScene().getWindow();
        Stage currentStage = (Stage)(currentScene.getWindow());

        currentStage.setScene(new Scene(secondRoot));
        currentStage.setTitle("Second Window");
        //currentStage.show();

        secondController.SetParentScene(currentScene);
    }
    catch (IOException ex) {
        System.err.println(ex);
    }

}

void confirmationButtonAction(ActionEvent event) {
        Alert alert = new Alert(AlertType.CONFIRMATION);
        alert.setTitle("Confirmation Dialog");
        alert.setHeaderText("Look, a Confirmation Dialog");
        alert.setContentText("Are you ok with this?");

        Optional<ButtonType> result = alert.showAndWait();
        if (result.get() == ButtonType.OK) {
            // ... user chose OK
            statusLabel.setText("... user chose OK");
        } else {
            // ... user chose CANCEL or closed the dialog
            statusLabel.setText("... user chose CANCEL or closed the dialog");
        }

    }


// -------TabPanel --------
ObservableList<PieChart.Data> pieChartData =
                FXCollections.observableArrayList(
                new PieChart.Data("Grapefruit", .2),
                new PieChart.Data("Oranges", .2),
                new PieChart.Data("Plums", .2),
                new PieChart.Data("Pears", .2),
                new PieChart.Data("Apples", .2));
        pieChart.setData(pieChartData);        



// ---- javaFX doc --- 
https://docs.oracle.com/javase/8/javase-clienttechnologies.htm

//Tab Documentation
https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Tab.html#onSelectionChangedProperty

// auto-complete
https://docs.gluonhq.com/charm/javadoc/4.4.1/com/gluonhq/charm/glisten/control/AutoCompleteTextField.html

https://search.maven.org/search?q=g:org.controlsfx%20AND%20a:controlsfx
https://github.com/controlsfx/controlsfx/tree/9.0.0